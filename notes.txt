
~1h: Understanding the assignment
~1h: Drafting an API structure based on the assignment while sticking to best practices
~2h: Researching Sequelize (new for me)
~1h: Designing and proposing a schema
~1h: Setting up the WSL environment, Git, PostgreSQL, etc.
Total: 6h

Day 1---

~3h: Creating database models and optimizing data types based on potential input ranges, 
        plus a constants module for adjusting model field lengths from a single place.

Didn’t use enums because tweaking values doesn’t align with the nature of enums(in my opinion).
Established case logic:
-snake_case for everything DB-related
-camelCase for DB-unrelated

~1h: Creating first the PostgreSQL structure:

One-to-Many: Program => Exercises

One-to-Many: Program => Program_translations

One-to-Many: Exercise => Exercise_translations

Many-to-Many: User_accounts <=> User_account_exercises <=> Exercises

I thought about indexes for potential use cases.
Total: 4h

Day 2---

~2h: Creating logging and error modules with simple usage.

Made it asynchronous to avoid blocking the main thread, though logs invoked close together might not appear sequentially.
~1h: Securing incoming requests with middleware (email validation + attack checks).

Relied on online resources heavily for regex.
Total: 3h

Day 3---

~3h: Finalizing previous work into a usable version.
~1h: Implementing JWT authentication.
~1h: Middleware for language validation (intercepting the language header).
~1h: Starting to develop API connectors.
Total: 6h

Day 4---

~5h: Writing, testing, and handling edge cases for APIs.

Unified function for extracting common request data: const { language, userToken, decoded } = basicReqInfo(req).
~1h: Added a completed_exercise table for query optimization, with calcualtion of time (seconds).

Many-to-Many: User_accounts <=> Completed_exercises <=> Exercises
~1h: Added validations like isAuthorized and isAdmin to API connectors.

Total: 8h

Day 5---

~2h: Pagination and limits for queries (language-dependent).

~2h: Dynamic query validation to avoid "if hell".

utils/consts contains allowed queries and types, validated by customReqValidation().
~4h: Finalizing APIs and fixing model logic.

Total: 8h

Day 6---
 ~2h: Final polishing and comments translation into EN


-Notes:

Things I didn’t implement :
-Indexing, e.g., User_accounts fields: ['id', 'nick_name'] for potential optimization of frequent queries.
-Rate limiting (e.g., express-rate-limit or a token bucket approach). Essential for cold runtimes and basic DoS protection.
-Password reset functionality.
-Critical log/error notifications (e.g., via email/SMS/Telegram). Nice but overkill.
-Expanded user API for updating their details (admin-only in this task).
-Query repeater with exponential backoff for unreliable connections.
-Containerization and emitted .js files (didn’t touch the compiler).
-I didn’t use extended file naming conventions because, given the small scope of the project.
-Tests (did manual unit, integration, and E2E but not via project code).
-UML diagram.
-TypeScript @aliases (avoided because of compatibility headaches, but in serious project its necessary in my opinion).

Things I implemented:
-Auto-optimized UV_THREADPOOL_SIZE for maximum efficiency based on hardware. ( must be in my opinion )
-Extended user API for managing exercises and programs. ( mainly for testing)
-Middleware protection against email and query injection attacks. if(query) has dynamic detection of query types
-localization for DB non-user entities

Decisions I made:
-Prefer snake_case for DB, camelCase for everything else.
-Used as const for numeric constants and enums for fixed strings.
-(OOP) Applied classes where design patterns required evident hierarchy; otherwise is hierarchy was simple, used functions.
-Standardized on bcrypt for password hashing (64 characters, 10 salt rounds) better than crypt agains GPU reverse-hashing.
-Language validation middleware precedes customReqValidation().
-Hard deletes over deletedAt where appropriate.
-Followed good schema architecture, avoided stuffing data into omni-tables tables.

-Challenges (used GPT help):
-Regex.
-Sequelize failing to create references for foreign keys in some cases.

Final thoughts:
-Sequelize is handy but lacks built-in attack protection (addressed via assignment logic).
-JWTs are simple, stateless, and great for horizontal scaling (no need for managed cache DBs in simple apps).
-Used online tools mostly for JWT, Sequelize, and regex.

I appreciate the opportunity to work on this, thank you.
Roman Janek